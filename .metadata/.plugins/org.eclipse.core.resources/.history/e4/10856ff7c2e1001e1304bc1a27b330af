package edu.kh.jdbc.model.service;

import java.sql.Connection;

// import static 구문
// -> static 붙은 필드, 메서드를 호출할 때
//         클래스명을 생략할 수 있게 해주는 구문
import edu.kh.jdbc.common.JDBCTemplate;
import edu.kh.jdbc.model.dao.TestDao;
import edu.kh.jdbc.model.vo.TestVO;

public class TestService {
		// Service : 비즈니스 로직(데이터 가공, 트랜잭션 제어) 처리
	    // -> 실제 프로그램이 제공하는 기능을 모아놓는 클래스
	
	    // 하나의 Service 메서드에서 n개의 Dao 메서드를 호출하여
	    // 이를 하나의 트랜잭션 단위로 취급하여
	   // 한번에 commit, rollback 을 수행할 수 있다.
	
	private TestDao dao = new TestDao();
	
	public int insert(TestVO vo1) throws Exception{
		
	// 커넥션 생성
		
		Connection conn = JDBCTemplate.getConnection();
		
		//DAO 메서드 호출하여 수행 후 결과 반환받기
		
		// -> Service에서 생성한 Connection 객체를 반드시 같이 전달!
		
		int result = dao.insert(conn, vo1);
		
		//트랜잭션 제어
		
		if(result > 0) {
			
			JDBCTemplate.commit(conn);
			
		}else if(result == 0) {
			JDBCTemplate.rollback(conn);
		}
		
		//커넥션 반환
		JDBCTemplate.close(conn);
		
		
		//결과반환
		
		return result;
	}
	
	public int insert(TestVO vo1,TestVO vo2,TestVO vo3) throws Exception{
		
		
		Connection conn = JDBCTemplate.getConnection();
		
		int result = 0; // insert 3회 모두 성공시 1 , 아니면 0 으로 지정해줄라고 만든다
		
		int res1 = dao.insert(conn, vo1); // 성공시 1 // 아니면 0 이게 res1에 저장된다
		int res2 = dao.insert(conn, vo2); // == 성공시 1 // 아니면 0 이게 res2에 저장된다
		int res3 = dao.insert(conn, vo3);// ==  성공시 1 // 아니면 0 이게 res3에 저장된다
		
		//3개의 행이 전부 insert 가 잘 됐나 확인하는것 
		
		
		if(res1 + res2 + res3 == 3) {
		  
			JDBCTemplate.commit(conn);
			result = 1;
			
		}else {
			
			JDBCTemplate.rollback(conn);
			
		}
		
		
		return result;
	}
	
}
